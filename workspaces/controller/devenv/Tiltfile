load("ext://restart_process", "docker_build_with_restart")

load_dynamic("./configs/tiltfiles/Tiltfile.setup")

config.define_string_list("services")

parsed_config = config.parse()

for service in parsed_config.get("services", []):
  load_dynamic("./configs/tiltfiles/Tiltfile.%s" % (service))

manifests = kustomize("../config/default")

objects = decode_yaml_stream(manifests)

for o in objects:
    if o["kind"] == "Deployment" and o.get("metadata").get("name") in ["workspace-controller-controller-manager"]:
        o["spec"]["template"]["spec"]["securityContext"] = {"runAsNonRoot": False, "readOnlyRootFilesystem": False}
        o["spec"]["template"]["spec"]["containers"][0]["imagePullPolicy"] = "Always"

overridden_manifests = encode_yaml_stream(objects)

k8s_yaml(overridden_manifests, allow_duplicates=True)

local_resource(
    "cert-manager-req-check",
    serve_cmd="sleep infinity",
    labels="requirements",
    readiness_probe=probe(
        exec=exec_action(
            command=["/bin/sh", "-c", "./bin/cmctl check api"]
        ), initial_delay_secs=5, timeout_secs=60
    )
)

k8s_resource(
    new_name="certs",
    objects=[
        "workspace-controller-serving-cert:certificate",
        "workspace-controller-selfsigned-issuer:issuer"
    ],
    labels="controller",
    resource_deps=[
        "controller-namespace",
        "cert-manager-req-check"
    ]
)

k8s_resource(
    new_name="reqs",
    objects=[
       "workspace-controller-controller-manager:serviceaccount",
       "workspace-controller-leader-election-role:role",
       "workspace-controller-manager-role:clusterrole",
       "workspace-controller-workspace-editor-role:clusterrole",
       "workspace-controller-workspace-viewer-role:clusterrole",
       "workspace-controller-workspacekind-editor-role:clusterrole",
       "workspace-controller-workspacekind-viewer-role:clusterrole",
       "workspace-controller-leader-election-rolebinding:rolebinding",
       "workspace-controller-manager-rolebinding:clusterrolebinding",
       "workspace-controller-validating-webhook-configuration:validatingwebhookconfiguration"
    ],
    labels="controller",
    resource_deps=[
        "controller-namespace"
    ]
)

k8s_resource(
    new_name="crds",
    objects=[
       "workspacekinds.kubeflow.org:customresourcedefinition",
       "workspaces.kubeflow.org:customresourcedefinition"
    ],
    labels="controller",
    resource_deps=[
        "controller-namespace",
    ]
)

k8s_resource(
    new_name="controller-namespace",
    objects=["workspace-controller-system:Namespace:default"],
    labels="requirements"
)

k8s_resource(
    workload="workspace-controller-controller-manager",
    new_name="controller",
    labels="controller",
    resource_deps=[
        "controller-namespace",
        "cert-manager-req-check",
        "certs"
    ]
)

local_resource(
    "manager-bin",
    "CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/manager cmd/main.go",
    dir = "../",
    deps = [
        "../cmd",
        "../internal",
        "../go.mod",
        "../go.sum",
    ],
    labels="controller",
)

docker_build_with_restart(
    "ghcr.io/kubeflow/notebooks/workspace-controller",
    context = "../",
    dockerfile = "../tilt.dockerfile",
    entrypoint = ["/manager"],
    only=[
      "bin/",
    ],
    live_update = [
        sync("../bin/manager", "/manager"),
    ],
)
